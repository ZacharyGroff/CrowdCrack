// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/ZacharyGroff/CrowdCrack/api"
	"github.com/ZacharyGroff/CrowdCrack/apiclient"
	"github.com/ZacharyGroff/CrowdCrack/client"
	"github.com/ZacharyGroff/CrowdCrack/encoder"
	"github.com/ZacharyGroff/CrowdCrack/flusher"
	"github.com/ZacharyGroff/CrowdCrack/logger"
	"github.com/ZacharyGroff/CrowdCrack/observer"
	"github.com/ZacharyGroff/CrowdCrack/queue"
	"github.com/ZacharyGroff/CrowdCrack/reader"
	"github.com/ZacharyGroff/CrowdCrack/requester"
	"github.com/ZacharyGroff/CrowdCrack/server"
	"github.com/ZacharyGroff/CrowdCrack/submitter"
	"github.com/ZacharyGroff/CrowdCrack/tracker"
	"github.com/ZacharyGroff/CrowdCrack/userinput"
	"github.com/ZacharyGroff/CrowdCrack/verifier"
	"github.com/ZacharyGroff/CrowdCrack/waiter"
)

// Injectors from wire.go:

func InitializeClient() client.Client {
	configProvider := userinput.NewCmdLineConfigProvider()
	requestQueue := queue.NewHashingRequestQueue()
	submissionQueue := queue.NewHashingSubmissionQueue()
	backupReader := reader.NewClientBackupReader(configProvider, requestQueue, submissionQueue)
	interfacesLogger := logger.NewConcurrentLogger(configProvider)
	clientStopQueue := queue.NewClientStopReasonQueue(configProvider)
	interfacesWaiter := waiter.NewSleeper(configProvider, interfacesLogger)
	encoderFactory := encoder.NewHasherFactory(configProvider, interfacesLogger, requestQueue, submissionQueue, clientStopQueue, interfacesWaiter)
	apiClient := apiclient.NewHashApiClient(configProvider)
	interfacesRequester := requester.NewPasswordRequester(configProvider, apiClient, interfacesLogger, requestQueue, clientStopQueue, interfacesWaiter)
	interfacesSubmitter := submitter.NewHashSubmitter(configProvider, apiClient, interfacesLogger, submissionQueue, clientStopQueue, interfacesWaiter)
	interfacesFlusher := flusher.NewClientQueueFlusher(configProvider, requestQueue, submissionQueue)
	clientClient := client.NewClient(backupReader, configProvider, encoderFactory, interfacesLogger, interfacesRequester, interfacesSubmitter, interfacesFlusher)
	return clientClient
}

func InitializeServer() server.Server {
	configProvider := userinput.NewCmdLineConfigProvider()
	flushingQueue := queue.NewHashQueue(configProvider)
	interfacesQueue := queue.NewPasswordQueue(configProvider)
	interfacesLogger := logger.NewConcurrentLogger(configProvider)
	interfacesTracker := tracker.NewStatsTracker()
	interfacesApi := api.NewHashApi(configProvider, flushingQueue, interfacesQueue, interfacesLogger, interfacesTracker)
	passwordReader := reader.NewWordlistReader(configProvider, interfacesQueue)
	interfacesObserver := observer.NewStatsObserver(interfacesLogger, interfacesTracker, configProvider)
	hashReader := reader.NewHashlistReader(configProvider)
	interfacesVerifier := verifier.NewHashVerifier(flushingQueue, hashReader, interfacesLogger, interfacesTracker)
	serverServer := server.NewServer(interfacesApi, interfacesLogger, passwordReader, interfacesObserver, interfacesVerifier)
	return serverServer
}
